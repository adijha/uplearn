{"version":3,"sources":["Services/API/jobApi.js","store/actions/jobsAction.js","store/reducers/jobsReducer.js","store/reducers/index.js","store/index.js","components/Button/Button.js","components/Job/Job.js","pages/jobsList.js","App.js","index.js"],"names":["fetchJobsApi","a","query","gql","request","jobs","console","error","JOBS_ACTION","jobsReducer","state","action","type","payload","data","allReducer","combineReducers","middlewares","promise","composeEnhancers","compose","store","createStore","Reducers","applyMiddleware","Button","className","Job","job","title","cities","countries","company","remotes","name","map","city","index","length","remote","country","JobList","useState","loading","setLoading","setError","dispatch","useDispatch","useSelector","fetchJobs","useCallback","errors","useEffect","id","App","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"iSACaA,EAAY,uCAAG,gCAAAC,EAAA,6DACrBC,EAAQC,cADa,ySAuBHC,kBAAQ,4BAA6BF,GAvBlC,uBAuBlBG,EAvBkB,EAuBlBA,KAvBkB,kBAwBnBA,GAxBmB,gCA0B1BC,QAAQC,MAAR,MA1B0B,yDAAH,qDCCZC,EACL,YCQOC,EATK,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,OAAQA,EAAOC,MACd,IAAI,GAAJ,OAAQJ,EAAR,cACC,OAAOG,EAAOE,QAAQC,KAAOH,EAAOE,QAAQC,KAAO,GACpD,QACC,OAAOJ,ICDKK,EAJIC,YAAgB,CAClCX,KAAMI,ICCDQ,EAAc,CAACC,KAEfC,EAOFC,IAUSC,EAPEC,YACbC,EACAJ,EAAiBK,IAAe,WAAf,EAAmBP,K,+BChBvB,SAASQ,IACvB,OAAO,wBAAQC,UAAU,mBAAlB,mB,UCmBOC,EAnBH,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACNC,EAA+CD,EAA/CC,MAAOC,EAAwCF,EAAxCE,OAAQC,EAAgCH,EAAhCG,UAAWC,EAAqBJ,EAArBI,QAASC,EAAYL,EAAZK,QAC3C,OACC,sBAAKP,UAAU,WAAf,UACC,qBAAIA,UAAU,YAAd,UACEG,EADF,MACW,sBAAMH,UAAU,cAAhB,SAA+BM,GAAWA,EAAQE,UAE7D,oBAAGR,UAAU,eAAb,UACC,mBAAGA,UAAU,qBAAwB,IACpCI,EAAOK,KAAI,SAACC,EAAMC,GAAP,OAA4B,IAAVA,EAAc,GAAK,MAAQD,EAAKF,QAC7DJ,EAAOQ,OAAS,GAAKL,EAAQK,OAAS,GAAK,KAC3CL,EAAQE,KAAI,SAACI,GAAD,OAAYA,EAAOL,WAEjC,mBAAGR,UAAU,cAAb,SAA4BK,EAAUI,KAAI,SAACK,GAAD,OAAaA,EAAQN,UAC/D,cAACT,EAAD,Q,MCXY,SAASgB,IAAW,IAAD,EACHC,oBAAS,GADN,mBAC1BC,EAD0B,KACjBC,EADiB,OAEPF,oBAAS,GAFF,mBAE1BnC,EAF0B,KAEnBsC,EAFmB,KAG3BC,EAAWC,cACX1C,EAAO2C,aAAY,SAACtC,GAAD,OAAWA,EAAML,QAEpC4C,EAAYC,sBAAW,sBAAC,sBAAAjD,EAAA,+EAEtB6C,ENRsB,CAC7BlC,KAAMJ,EACNK,QAAQ,WAAD,4BAAE,4BAAAZ,EAAA,+EAEYD,IAFZ,cAEDK,EAFC,yBAGE,CAACS,KAAMT,IAHT,yDAKE,CAAC8C,OAAO,EAAD,GAAKrC,KAAM,KALpB,yDAAF,kDAAC,KMIqB,OAG5B8B,GAAW,GAHiB,gDAK5BA,GAAW,GACXC,GAAS,GANmB,yDAQ3B,CAACC,IAKJ,OAHAM,qBAAU,WACTH,MACE,CAACA,IAEH,sBAAKvB,UAAU,WAAf,UACC,+CACCiB,EACA,qBAAIjB,UAAU,mBAAd,wBACY,mBAAGA,UAAU,8CAEtBnB,EACH,oBAAImB,UAAU,kBAAd,0CAEArB,GAAQA,EAAK8B,KAAI,SAACP,GAAD,OAAS,cAAC,EAAD,CAAkBA,IAAKA,GAAbA,EAAIyB,UC/B7B,SAASC,IACvB,OAAO,cAACb,EAAD,ICCR,IAAMc,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,CAAUvC,MAAOA,EAAjB,SACC,cAAC,EAAD,QAGFkC,K","file":"static/js/main.8374469d.chunk.js","sourcesContent":["import { request, gql } from \"graphql-request\";\nexport const fetchJobsApi = async () => {\n\tconst query = gql`\n\t\t{\n\t\t\tjobs {\n\t\t\t\tid\n\t\t\t\ttitle\n\t\t\t\tcompany {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\tcities {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\tcountries {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\tremotes {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n\n\ttry {\n\t\tconst { jobs } = await request(\"https://api.graphql.jobs/\", query);\n\t\treturn jobs;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n};\n","import {fetchJobsApi} from '../../Services/API/jobApi';\n\nexport const JOBS_ACTION = {\n  LIST: 'LIST_JOBS',\n};\n\nexport const listJobs = () => ({\n  type: JOBS_ACTION.LIST,\n  payload: async () => {\n    try {\n      let jobs = await fetchJobsApi();\n      return {data: jobs};\n    } catch (e) {\n      return {errors: e, data: []};\n    }\n  },\n});\n","import { JOBS_ACTION } from \"../actions/jobsAction\";\n\nconst jobsReducer = (state = [], action) => {\n\tswitch (action.type) {\n\t\tcase `${JOBS_ACTION.LIST}_FULFILLED`:\n\t\t\treturn action.payload.data ? action.payload.data : [];\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default jobsReducer;\n","import jobsReducer from \"./jobsReducer\";\nimport { combineReducers } from \"redux\";\nconst allReducer = combineReducers({\n\tjobs: jobsReducer,\n});\n\nexport default allReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport promise from \"redux-promise-middleware\";\nimport Reducers from \"./reducers\";\n\nconst middlewares = [promise];\n\nconst composeEnhancers =\n\tprocess.env.NODE_ENV !== \"production\" &&\n\ttypeof window === \"object\" &&\n\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n\t\t? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n\t\t\t\t// Specify extensionâ€™s options like name, actionsBlacklist, actionsCreators, serialize...\n\t\t  })\n\t\t: compose;\n\nconst configureStore = () => {\n\tconst store = createStore(\n\t\tReducers,\n\t\tcomposeEnhancers(applyMiddleware(...middlewares))\n\t);\n\treturn store;\n};\n\nexport const store = configureStore();\n","import React from \"react\";\nimport \"./button.scss\";\nexport default function Button() {\n\treturn <button className=\"job-apply-button\">Apply</button>;\n}\n","import React from \"react\";\nimport Button from \"../Button/Button\";\nimport \"./job.scss\";\nconst Job = ({ job }) => {\n\tconst { title, cities, countries, company, remotes } = job;\n\treturn (\n\t\t<div className=\"job-card\">\n\t\t\t<h3 className=\"job-title\">\n\t\t\t\t{title} - <span className=\"job-company\">{company && company.name}</span>\n\t\t\t</h3>\n\t\t\t<p className=\"job-location\">\n\t\t\t\t<i className=\"fa fa-map-marker\"></i>{\" \"}\n\t\t\t\t{cities.map((city, index) => (index === 0 ? \"\" : \", \") + city.name)}\n\t\t\t\t{cities.length > 0 && remotes.length > 0 && \", \"}\n\t\t\t\t{remotes.map((remote) => remote.name)}\n\t\t\t</p>\n\t\t\t<p className=\"job-country\">{countries.map((country) => country.name)}</p>\n\t\t\t<Button />\n\t\t</div>\n\t);\n};\n\nexport default Job;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport Job from \"../components/Job/Job\";\nimport \"./jobList.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listJobs } from \"../store/actions/jobsAction\";\n\nexport default function JobList() {\n\tconst [loading, setLoading] = useState(true);\n\tconst [error, setError] = useState(false);\n\tconst dispatch = useDispatch();\n\tconst jobs = useSelector((state) => state.jobs);\n\n\tconst fetchJobs = useCallback(async () => {\n\t\ttry {\n\t\t\tawait dispatch(listJobs());\n\t\t\tsetLoading(false);\n\t\t} catch (error) {\n\t\t\tsetLoading(false);\n\t\t\tsetError(true);\n\t\t}\n\t}, [dispatch]);\n\n\tuseEffect(() => {\n\t\tfetchJobs();\n\t}, [fetchJobs]);\n\treturn (\n\t\t<div className=\"job-page\">\n\t\t\t<h1>Here are Jobs</h1>\n\t\t\t{loading ? (\n\t\t\t\t<h3 className=\"job-page-loading\">\n\t\t\t\t\tLoading... <i className=\"fa fa-spinner fa-spin job-page-spinner\"></i>\n\t\t\t\t</h3>\n\t\t\t) : error ? (\n\t\t\t\t<h3 className=\"job-fetch-error\">Sorry, Something went wrong!</h3>\n\t\t\t) : (\n\t\t\t\tjobs && jobs.map((job) => <Job key={job.id} job={job} />)\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport JobList from \"./pages/jobsList\";\n\nexport default function App() {\n\treturn <JobList />;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\trootElement\n);\n"],"sourceRoot":""}